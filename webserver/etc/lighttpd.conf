
# lighttpd configuration file
#
# use it as a base for lighttpd 1.0.0 and above
#
# $Id: lighttpd.conf,v 1.11 2013/02/19 08:19:44 xhhuang Exp $

############ Options you really have to take care of ####################

## modules to load
# at least mod_access and mod_accesslog should be loaded
# all other module should only be loaded if really neccesary
# - saves some time
# - saves memory
server.modules              = (
#                               "mod_rewrite",
#                               "mod_redirect",
#                               "mod_alias",
                                "mod_access",
#                               "mod_cml",
#                               "mod_trigger_b4_dl",
#                               "mod_auth",
#                               "mod_status",
#                               "mod_setenv",
#                               "mod_fastcgi",
#                               "mod_proxy",
#                               "mod_simple_vhost",
#                               "mod_evhost",
#                               "mod_userdir",
#                               "mod_cgi",
#                               "mod_compress",
#                               "mod_ssi",
#                               "mod_usertrack",
#                               "mod_expire",
#                               "mod_secdownload",
#                               "mod_rrdtool",
#                                "mod_accesslog" )
			    )
include "websocket.conf"
## a static document-root, for virtual-hosting take look at the
## server.virtual-* options
server.document-root        = "/system/webgui/gvc3200"
$HTTP["url"] =~ "^/ppp" {
  server.document-root = "/sdcard/"
  dir-listing.activate = "enable"
}
$HTTP["url"] =~ "^/phonebook/phonebook.xml" {
  server.document-root = "/sdcard/"
  dir-listing.activate = "enable"
}
$HTTP["url"] =~ "^/phonebook/phonebook.csv" {
  server.document-root = "/sdcard/"
  dir-listing.activate = "enable"
}
$HTTP["url"] =~ "^/phonebook/phonebook.vcf" {
  server.document-root = "/sdcard/"
  dir-listing.activate = "enable"
}
$HTTP["url"] =~ "^/message/message.xml" {
  server.document-root = "/sdcard/"
  dir-listing.activate = "enable"
}
$HTTP["url"] =~ "^/callhistory/callhistory.xml" {
  server.document-root = "/sdcard/"
  dir-listing.activate = "enable"
}
$HTTP["url"] =~ "^/download" {
  server.document-root = "/system/lighttpd/"
  dir-listing.activate = "enable"
}
$HTTP["url"] =~ "^/logcat/logcat.txt" {
  server.document-root = "/tmp/"
  dir-listing.activate = "enable"
}
$HTTP["url"] =~ "^/config"{               
  server.document-root = "/tmp/"                              
  dir-listing.activate = "enable"                              
}
$HTTP["url"] =~ "^/Recording/"{               
  server.document-root = "/mnt/extsd/"                              
  dir-listing.activate = "enable"                              
}
$HTTP["url"] =~ "^/sdcard/Recording/"{               
  server.document-root = "/mnt/"                              
  dir-listing.activate = "enable"                              
}
$HTTP["url"] =~ "^/usbhost0/Recording/"{               
  server.document-root = "/mnt/"                              
  dir-listing.activate = "enable"                              
}
$HTTP["url"] =~ "^/usbhost1/Recording/"{               
  server.document-root = "/mnt/"                              
  dir-listing.activate = "enable"                              
}
$HTTP["url"] =~ "^/usbhost2/Recording/"{               
  server.document-root = "/mnt/"                              
  dir-listing.activate = "enable"                              
}
$HTTP["url"] =~ "^/usbhost3/Recording/"{               
  server.document-root = "/mnt/"                              
  dir-listing.activate = "enable"                              
}
$HTTP["url"] =~ "^/com.base.module.preset"{
  server.document-root = "/data/data/"                              
  dir-listing.activate = "enable"                              
}
## where to send error-messages to
server.errorlog             = "/dev/null"

# files to check for if .../ is requested
index-file.names            = ( "login.html")

## set the event-handler (read the performance section in the manual)
# server.event-handler = "freebsd-kqueue" # needed on OS X

# mimetype mapping
mimetype.assign             = (
  ".pdf"          =>      "application/pdf",
  ".sig"          =>      "application/pgp-signature",
  ".spl"          =>      "application/futuresplash",
  ".class"        =>      "application/octet-stream",
  ".ps"           =>      "application/postscript",
  ".torrent"      =>      "application/x-bittorrent",
  ".dvi"          =>      "application/x-dvi",
  ".gz"           =>      "application/x-gzip",
  ".pac"          =>      "application/x-ns-proxy-autoconfig",
  ".swf"          =>      "application/x-shockwave-flash",
  ".tar.gz"       =>      "application/x-tgz",
  ".tgz"          =>      "application/x-tgz",
  ".tar"          =>      "application/x-tar",
  ".zip"          =>      "application/zip",
  ".mp3"          =>      "audio/mpeg",
  ".m3u"          =>      "audio/x-mpegurl",
  ".wma"          =>      "audio/x-ms-wma",
  ".wax"          =>      "audio/x-ms-wax",
  ".ogg"          =>      "application/ogg",
  ".wav"          =>      "audio/x-wav",
  ".gif"          =>      "image/gif",
  ".jar"          =>      "application/x-java-archive",
#  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
#  ".png"          =>      "image/png",
  ".xbm"          =>      "image/x-xbitmap",
  ".xpm"          =>      "image/x-xpixmap",
  ".xwd"          =>      "image/x-xwindowdump",
  ".css"          =>      "text/css",
  ".html"         =>      "text/html",
  ".htm"          =>      "text/html",
  ".js"           =>      "text/javascript",
  ".asc"          =>      "text/plain",
  ".c"            =>      "text/plain",
  ".cpp"          =>      "text/plain",
  ".log"          =>      "text/plain",
  ".conf"         =>      "text/plain",
  ".text"         =>      "text/plain",
  ".txt"          =>      "text/plain",
  ".dtd"          =>      "text/xml",
#  ".xml"          =>      "text/xml",
  ".mp4"          =>      "application/octet-stream",
  ".mpeg"         =>      "video/mpeg",
  ".mpg"          =>      "video/mpeg",
  ".mov"          =>      "video/quicktime",
  ".qt"           =>      "video/quicktime",
  ".avi"          =>      "video/x-msvideo",
  ".asf"          =>      "video/x-ms-asf",
  ".asx"          =>      "video/x-ms-asf",
  ".wmv"          =>      "video/x-ms-wmv",
  ".bz2"          =>      "application/x-bzip",
  ".tbz"          =>      "application/x-bzip-compressed-tar",
  ".tar.bz2"      =>      "application/x-bzip-compressed-tar",
  # default mime type
  ""              =>      "application/octet-stream",
 )

# Use the "Content-Type" extended attribute to obtain mime type if possible
#mimetype.use-xattr        = "enable"


## send a different Server: header
## be nice and keep it at lighttpd
server.tag                 = "Enterprise Phone"

#### accesslog module
#accesslog.filename          = "/var/log/lighttpdaccess.log"

## deny access the file-extensions
#
# ~    is for backupfiles from vi, emacs, joe, ...
# .inc is often used for code includes which should in general not be part
#      of the document-root
url.access-deny             = ("/account")

#$HTTP["url"] =~ "\.pdf$" {
#  server.range-requests = "disable"
#}

##
# which extensions should not be handle via static-file transfer
#
# .php, .pl, .fcgi are most often handled by mod_fastcgi or mod_cgi
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi", ".cgi" )

######### Options that are good to be but not neccesary to be changed #######

## bind to port (default: 80)
server.port                = 80
server.upload-dirs = ("/tmp")              
server.max-request-size = 0                        
server.network-backend="write"

## bind to localhost (default: all interfaces)
#server.bind                = "127.0.0.1"

## error-handler for status 404
#server.error-handler-404   = "/error-handler.html"
#server.error-handler-404   = "/error-handler.php"

## to help the rc.scripts
#server.pid-file            = "/var/run/lighttpd.pid"


###### virtual hosts
##
##  If you want name-based virtual hosting add the next three settings and load
##  mod_simple_vhost
##
## document-root =
##   virtual-server-root + virtual-server-default-host + virtual-server-docroot
## or
##   virtual-server-root + http-host + virtual-server-docroot
##
#simple-vhost.server-root   = "/srv/www/vhosts/"
#simple-vhost.default-host  = "www.example.org"
#simple-vhost.document-root = "/htdocs/"


##
## Format: <errorfile-prefix><status-code>.html
## -> ..../status-404.html for 'File not found'
#server.errorfile-prefix    = "/usr/share/lighttpd/errors/status-"
#server.errorfile-prefix    = "/srv/www/errors/status-"

## virtual directory listings
#dir-listing.activate       = "enable"

## enable debugging
#debug.log-request-header   = "enable"
#debug.log-response-header  = "enable"
#debug.log-request-handling = "enable"
#debug.log-file-not-found   = "enable"

### only root can use these options
#
# chroot() to directory (default: no chroot() )
#server.chroot              = "/"

## change uid to <uid> (default: don't care)
#server.username            = "wwwrun"

## change uid to <uid> (default: don't care)
#server.groupname           = "wwwrun"

#### compress module
#compress.cache-dir         = "/var/cache/lighttpd/compress/"
#compress.filetype          = ("text/plain", "text/html")

#### proxy module
## read proxy.txt for more info
#proxy.server               = ( ".php" =>
#                               ( "localhost" =>
#                                 (
#                                   "host" => "192.168.0.101",
#                                   "port" => 80
#                                 )
#                               )
#                             )

#### fastcgi module
## read fastcgi.txt for more info
## for PHP don't forget to set cgi.fix_pathinfo = 1 in the php.ini
#fastcgi.server             = ( ".php" =>
#                               ( "localhost" =>
#                                 (
#                                   "socket" => "/var/run/lighttpd/php-fastcgi.socket",
#                                   "bin-path" => "/usr/local/bin/php-cgi"
#                                 )
#                               )
#                            )

#### CGI module
#cgi.assign                 = ( ".pl"  => "/usr/bin/perl",
#                                ".cgi"  => "")


#### SSL engine
#ssl.engine                 = "disable"
#$SERVER["socket"] == ":443" {
#                 ssl.engine = "enable"
#                 ssl.pemfile = "/lighttpd/server.pem"
#
#  }
ssl.engine  = "disable"
ssl.pemfile = "/system/etc/gxe50xx.pem"
ssl.use-sslv2 = "disable"
ssl.use-sslv3 = "disable"

#### status module
#status.status-url          = "/server-status"
#status.config-url          = "/server-config"

## debugging
# 0 for off, 1 for 'auth-ok' messages, 2 for verbose debugging
auth.debug                 = 2

## type of backend
# plain, htpasswd, ldap or htdigest
#auth.backend               = "htpasswd"

# filename of the password storage for
# plain
# auth.backend.plain.userfile = "lighttpd-plain.user"

## for htpasswd
#auth.backend.htpasswd.userfile = "/etc/lighttpd/conf.d/lighttpd.user"

## for htdigest
#auth.backend.htdigest.userfile = "lighttpd-htdigest.user"

## for ldap
# the $ in auth.backend.ldap.filter is replaced by the
# 'username' from the login dialog
# auth.backend.ldap.hostname = "localhost"
# auth.backend.ldap.base-dn  = "dc=my-domain,dc=com"
# auth.backend.ldap.filter   = "(uid=$)"
# if enabled, startTLS needs a valid (base64-encoded) CA
# certificate unless the certificate has been stored
# in a c_hashed directory and referenced in ldap.conf
# auth.backend.ldap.starttls   = "enable"
# auth.backend.ldap.ca-file   = "/etc/CAcertificate.pem"
# If you need to use a custom bind to access the server
# auth.backend.ldap.bind-dn  = "uid=admin,dc=my-domain,dc=com"
# auth.backend.ldap.bind-pw  = "mysecret"
# If you want to allow empty passwords
# "disable" for requiring passwords, "enable" for allowing empty passwords
# auth.backend.ldap.allow-empty-pw = "disable"

## restrictions
# set restrictions:
#
# ( <left-part-of-the-url> =>
#   ( "method" => "digest"/"basic",
#     "realm" => <realm>,
#     "require" => "user=<username>" )
# )
#
# <realm> is a string to display in the dialog
#         presented to the user and is also used for the
#         digest-algorithm and has to match the realm in the
#         htdigest file (if used)
#
 # Or, using regular expressions:

#### url handling modules (rewrite, redirect, access)
#url.rewrite                = ( "^/$"             => "/server-status" )
#url.redirect               = ( "^/wishlist/(.+)" => "http://www.123.org/$1" )
#url.redirect               = ( "index.html" => "login.html" )
url.redirect = ( "index.html" => "login.html",
                 "^/js/*.*"  => "../login.html",
                 "^/account*/*.*"  => "../login.html",
                 "^/advset/*.*"  => "../login.html",
                 "^/css/*.*"  => "../login.html",
                 "^/devman/*.*"  => "../login.html",
                 "^/help/*.*"  => "../login.html",
                 "^/img/*.*"  => "../login.html",
                 "^/lan/*.*"  => "../login.html",
                 "^/mainten/*.*"  => "../login.html",
                 "^/status/*.*"  => "../login.html")
#### both rewrite/redirect support back reference to regex conditional using %n
#$HTTP["host"] =~ "^www\.(.*)" {
#url.redirect            = ( "^/(.*)" => "http://%2/login.html" )
#}

#
# define a pattern for the host url finding
# %% => % sign
# %0 => domain name + tld
# %1 => tld
# %2 => domain name without tld
# %3 => subdomain 1 name
# %4 => subdomain 2 name
#
#evhost.path-pattern        = "/srv/www/vhosts/%3/htdocs/"

#### expire module
#expire.url                 = ( "/buggy/" => "access 2 hours", "/asdhas/" => "access plus 1 seconds 2 minutes")

#### ssi
#ssi.extension              = ( ".shtml" )

#### rrdtool
#rrdtool.binary             = "/usr/bin/rrdtool"
#rrdtool.db-name            = "/var/lib/lighttpd/lighttpd.rrd"

#### setenv
#setenv.add-request-header  = ( "TRAV_ENV" => "mysql://user@host/db" )
#setenv.add-response-header = ( "X-Secret-Message" => "42" )

## for mod_trigger_b4_dl
# trigger-before-download.gdbm-filename = "/var/lib/lighttpd/trigger.db"
# trigger-before-download.memcache-hosts = ( "127.0.0.1:11211" )
# trigger-before-download.trigger-url = "^/trigger/"
# trigger-before-download.download-url = "^/download/"
# trigger-before-download.deny-url = "http://127.0.0.1/index.html"
# trigger-before-download.trigger-timeout = 10

## for mod_cml
## don't forget to add index.cml to server.indexfiles
# cml.extension               = ".cml"
# cml.memcache-hosts          = ( "127.0.0.1:11211" )

#### variable usage:
## variable name without "." is auto prefixed by "var." and becomes "var.bar"
#bar = 1
#var.mystring = "foo"

## integer add
#bar += 1
## string concat, with integer cast as string, result: "www.foo1.com"
#server.name = "www." + mystring + var.bar + ".com"
## array merge
#index-file.names = (foo + ".php") + index-file.names
#index-file.names += (foo + ".php")

#### include
#include /etc/lighttpd/lighttpd-inc.conf
## same as above if you run: "lighttpd -f /etc/lighttpd/lighttpd.conf"
#include "lighttpd-inc.conf"

#### include_shell
#include_shell "echo var.a=1"
## the above is same as:
#var.a=1

#### IPv6 enabled
server.use-ipv6 = "enable"
